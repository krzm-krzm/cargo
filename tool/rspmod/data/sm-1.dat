# Optimal solution:
#x[1,8,16]
#x[1,16,3]
#x[1,1,8]
#x[2,5,12]
#x[2,6,20]
#x[2,7,9]
#x[2,9,10]
#x[2,10,17]
#x[2,11,14]
#x[2,12,6]
#x[2,13,19]
#x[2,14,13]
#x[2,15,5]
#x[2,17,18]
#x[2,18,15]
#x[2,19,4]
#x[2,20,11]
#x[2,2,7]
#Cost: 12807
#vehl 1: +1, +6, -6, -1
#vehl 2: +2, +5, +7, +8, -7, -8, -5, +3, +10, +4, -10, +9, -4, -3, -9, -2

# No all customers:
# x[1,8,16]
# x[1,16,3]
# x[1,1,8]
# x[2,5,6]
# x[2,6,17]
# x[2,7,9]
# x[2,9,15]
# x[2,11,14]
# x[2,13,19]
# x[2,14,13]
# x[2,15,5]
# x[2,17,11]
# x[2,19,4]
# x[2,2,7]
# Cost: 12216
#vehl 1: +1, +6, -6, -1
#vehl 2: +2, +5, +7, -5, +3, +4, -7, +9, -4, -3, -9, -2

data;

# param m: number of vehicles
# param n: number of customers
# param speed: m/s (early/late are in sec; sp is in meters)
param m := 2;
param n := 8;
param speed := 10;

# param serv: service time (time spent at a pickup/dropoff)
# the row ordering is: first put vehicle origs, then dests; then
# put cust origs, then dests
param:
   serv load early late nodeid:=
 1  0    0    0     90000 42833
 2  0    0    0     90000 219178
 3  0    0    0     90000 35518
 4  0    0    0     90000 279784
 5  0    1    0     2000  264377
 6  0    1    0     2000  272191
 7  0    1    0     2000  87722
 8  0    1    0     2000  312071
 9  0    1    0     2000  51404
10  0    1    0     2000  188758
11  0    1    0     2000  30656
12  0    1    0     2000  314945
13  0   -1    0     2000  118317
14  0   -1    0     2000  235398
15  0   -1    0     2000  268070
16  0   -1    0     2000  45555
17  0   -1    0     2000  340739
18  0   -1    0     2000  91663
19  0   -1    0     2000  302790
20  0   -1    0     2000  317653;

# max ride constraint for customers
param ride :=
 5  2000
 6  2000
 7  2000
 8  2000
 9  2000
10  2000
11  2000
12  2000;

# max trip time for vehicles
param trip :=
 1  90000
 2  90000;

# vehicle capacity
param cap :=
 1  3
 2  3;

# sp is keyed by the large param table at the top of this section; but the
# values come from the nodeids. Use ~/devel/spmat.py to generate.
param sp : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 :=
1 0 1337 1630 2111 1124 1424 1255 317 1382 2102 1080 1502 1305 1246 1030 1441 985 761 1732 687
2    1337 0 1847 2770 2097 2085 1137 1427 1750 2470 1448 2531 1673 1614 1849 1665 1353 1415 2100 750
3   1630 1847 0 2174 2288 2276 802 1947 1122 1681 1352 2563 1199 1258 2040 189 1544 1606 1062 1104
4    2111 2770 2174 0 1329 1134 2117 2123 1348 493 1564 861 1339 1398 1386 2143 1417 1659 1389 2120
5    1124 2097 2288 1329 0 398 1913 1321 1284 1360 1038 720 1263 1204 248 2099 744 701 1325 1447
6    1424 2085 2276 1134 398 0 1901 1624 1259 1293 1026 525 1250 1192 394 2087 732 847 1300 1435
7   1255 1137 802 2117 1913 1901 0 1572 774 1817 977 2229 851 910 1665 613 1169 1231 1056 657
8    317 1427 1947 2123 1321 1624 1572 0 1699 2419 1397 1699 1622 1563 1334 1758 1302 1065 2049 1004
9   1382 1750 1122 1348 1284 1259 774 1699 0 1048 302 1460 77 136 1036 933 596 658 402 1053
10    2102 2470 1681 493 1360 1293 1817 2419 1048 0 1264 1354 1039 1098 1112 1650 1117 1359 953 1820
11   1080 1448 1352 1564 1038 1026 977 1397 302 1264 0 1472 225 166 790 1163 294 356 704 751
12    1502 2531 2563 861 720 525 2229 1699 1460 1354 1472 0 1451 1510 777 2388 1178 1230 1501 1881
13    1305 1673 1199 1339 1263 1250 851 1622 77 1039 225 1451 0 59 1015 1010 519 581 479 976
14    1246 1614 1258 1398 1204 1192 910 1563 136 1098 166 1510 59 0 956 1069 460 522 538 917
15    1030 1849 2040 1386 248 394 1665 1334 1036 1112 790 777 1015 956 0 1851 496 453 1077 1199
16   1441 1665 189 2143 2099 2087 613 1758 933 1650 1163 2388 1010 1069 1851 0 1355 1417 921 915
17    985 1353 1544 1417 744 732 1169 1302 596 1117 294 1178 519 460 496 1355 0 242 747 703
18   761 1415 1606 1659 701 847 1231 1065 658 1359 356 1230 581 522 453 1417 242 0 989 765
19    1732 2100 1062 1389 1325 1300 1056 2049 402 953 704 1501 479 538 1077 921 747 989 0 1351
20    687 750 1104 2120 1447 1435 657 1004 1053 1820 751 1881 976 917 1199 915 703 765 1351 0;



















end;
