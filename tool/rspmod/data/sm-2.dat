# Optimal solution:
# x[1,5,6]
# x[1,6,13]
# x[1,8,12]
# x[1,10,14]
# x[1,12,20]
# x[1,13,10]
# x[1,14,8]
# x[1,16,18]
# x[1,18,3]
# x[1,20,16]
# x[1,1,5]
# x[2,7,11]
# x[2,9,15]
# x[2,11,19]
# x[2,15,17]
# x[2,17,4]
# x[2,19,9]
# x[2,2,7]
# Cost: 45094

# No all customers to be matched:
# x[1,5,10]
# x[1,8,12]
# x[1,10,13]
# x[1,12,20]
# x[1,13,8]
# x[1,16,18]
# x[1,18,3]
# x[1,20,16]
# x[1,1,5]
# x[2,6,14]
# x[2,14,4]
# x[2,2,6]
# cost: 40568.000

data;

# param m: number of vehicles
# param n: number of customers
# param speed: m/s (early/late are in sec; sp is in meters)
param m := 2;
param n := 8;
param speed := 10;

# param serv: service time (time spent at a pickup/dropoff)
# the row ordering is: first put vehicle origs, then dests; then
# put cust origs, then dests
param:
   serv load early late nodeid:=
 1  0    0    0     90000 20502
 2  0    0    0     90000 20502
 3  0    0    0     90000 9576
 4  0    0    0     90000 28612
 5  0    1    0     2000  15600
 6  0    1    0     2000  7092
 7  0    1    0     2000  28812
 8  0    1    0     2000  20725
 9  0    1    0     2000  22704
10  0    1    0     2000  31646
11  0    1    0     2000  2358
12  0    1    0     2000  5591
13  0   -1    0     2000  31645
14  0   -1    0     2000  21858
15  0   -1    0     2000  13457
16  0   -1    0     2000  5774
17  0   -1    0     2000  960
18  0   -1    0     2000  31174
19  0   -1    0     2000  16269
20  0   -1    0     2000  32076;

# max ride constraint for customers
param ride :=
 5  2000
 6  2000
 7  2000
 8  2000
 9  2000
10  2000
11  2000
12  2000;

# max trip time for vehicles
param trip :=
 1  90000
 2  90000;

# vehicle capacity
param cap :=
 1  3
 2  3;

# sp is keyed by the large param table at the top of this section; but the
# values come from the nodeids. Use ~/devel/spmat.py to generate.
param sp : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 :=
1   0 0 9400 8054 1461 3635 6543 5729 4084 4613 4073 5663 4625 6381 2698 8085 3709 7496 3551 8033
2   0 0 9400 8054 1461 3635 6543 5729 4084 4613 4073 5663 4625 6381 2698 8085 3709 7496 3551 8033
3  9400 9400 0 6875 7939 6872 4011 7054 5641 8748 5603 6616 8670 8487 7133 4081 6794 3476 6054 5009
4   8054 8054 6875 0 7631 4866 4612 2532 7398 4688 5317 2621 4766 2620 7301 3598 5223 5700 6326 3070
5   1461 1461 7939 7631 0 3138 5750 5299 2623 4539 3061 5233 4461 6619 1237 7544 3235 6143 2090 7492
6  3635 3635 6872 4866 3138 0 3814 2548 3412 2283 1707 2482 2205 4269 2808 4721 766 4916 2334 4669
7   6543 6543 4011 4612 5750 3814 0 4218 4762 5755 2714 3780 5677 5657 5303 2718 3736 1160 4287 3035
8   5729 5729 7054 2532 5299 2548 4218 0 5406 2356 3580 438 2278 2434 4969 3501 3038 5312 4334 3449
9   4084 4084 5641 7398 2623 3412 4762 5406 0 5439 2428 5266 5361 7260 1817 7133 3821 5027 1340 7081
10   4613 4613 8748 4688 4539 2283 5755 2356 5439 0 3965 2290 78 2672 4209 5207 2357 6882 4361 5155
11  4073 4073 5603 5317 3061 1707 2714 3580 2428 3965 0 3185 3887 5434 2614 4973 1629 3468 1607 4921
12  5663 5663 6616 2621 5233 2482 3780 438 5266 2290 3185 0 2212 2872 4903 3063 2972 4874 4194 3011
13   4625 4625 8670 4766 4461 2205 5677 2278 5361 78 3887 2212 0 2750 4131 5129 2279 6804 4283 5077
14   6381 6381 8487 2620 6619 4269 5657 2434 7260 2672 5434 2872 2750 0 6289 4934 4437 6745 6188 4882
15   2698 2698 7133 7301 1237 2808 5303 4969 1817 4209 2614 4903 4131 6289 0 7151 2905 5696 1602 7099
16  8085 8085 4081 3598 7544 4721 2718 3501 7133 5207 4973 3063 5129 4934 7151 0 5035 2960 6144 1072
17 3709 3709 6794 5223 3235 766 3736 3038 3821 2357 1629 2972 2279 4437 2905 5035 0 4838 2769 4983
18   7496 7496 3476 5700 6143 4916 1160 5312 5027 6882 3468 4874 6804 6745 5696 2960 4838 0 4631 3650
19   3551 3551 6054 6326 2090 2334 4287 4334 1340 4361 1607 4194 4283 6188 1602 6144 2769 4631 0 6092
20   8033 8033 5009 3070 7492 4669 3035 3449 7081 5155 4921 3011 5077 4882 7099 1072 4983 3650 6092 0;

end;
