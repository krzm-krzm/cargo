# Solution:
# x[1,6,18]
# x[1,7,11]
# x[1,8,15]
# x[1,9,10]
# x[1,10,17]
# x[1,11,14]
# x[1,14,19]
# x[1,15,16]
# x[1,16,3]
# x[1,17,6]
# x[1,18,7]
# x[1,19,8]
# x[1,1,9]
# x[2,5,13]
# x[2,12,20]
# x[2,13,4]
# x[2,20,5]
# x[2,2,12]
# cost: 38500.000

# No all customers:
# x[1,6,18]
# x[1,7,14]
# x[1,10,6]
# x[1,14,15]
# x[1,15,3]
# x[1,18,7]
# x[1,1,10]
# x[2,5,13]
# x[2,13,4]
# x[2,2,5]
# cost: 37315.000

data;

# param m: number of vehicles
# param n: number of customers
# param speed: m/s (early/late are in sec; sp is in meters)
param m := 2;
param n := 8;
param speed := 10;

# param serv: service time (time spent at a pickup/dropoff)
# the row ordering is: first put vehicle origs, then dests; then
# put cust origs, then dests
param:
   serv load early late nodeid:=
 1  0    0    0     90000 326
 2  0    0    0     90000 8559
 3  0    0    0     90000 8559
 4  0    0    0     90000 326
 5  0    1    0     2000  2485
 6  0    1    0     2000  4844
 7  0    1    0     2000  4901
 8  0    1    0     2000  6153
 9  0    1    0     2000  4425
10  0    1    0     2000  3497
11  0    1    0     2000  205
12  0    1    0     2000  1850
13  0   -1    0     2000  4962
14  0   -1    0     2000  2589
15  0   -1    0     2000  1038
16  0   -1    0     2000  547
17  0   -1    0     2000  4810
18  0   -1    0     2000  7866
19  0   -1    0     2000  2165
20  0   -1    0     2000  405;

# max ride constraint for customers
param ride :=
 5  2000
 6  2000
 7  2000
 8  2000
 9  2000
10  2000
11  2000
12  2000;

# max trip time for vehicles
param trip :=
 1  90000
 2  90000;

# vehicle capacity
param cap :=
 1  3
 2  3;

# sp is keyed by the large param table at the top of this section; but the
# values come from the nodeids. Use ~/devel/spmat.py to generate.
# param sp : 326 8559 8559 326 2485 4844 4901 6153 4425 3497 205 1850 4962 2589 1038 547 4810 7866 2165 405 :=
param sp : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 :=
1 0 12256 12256 0 6297 7065 8249 10505 4109 5528 7570 10281 5108 7864 9190 10277 5780 7882 8839 11049
2  12256 0 0 12256 6735 5861 5075 3656 8453 7011 4768 2192 7373 4474 3195 2083 7461 6108 4396 2955
3  12256 0 0 12256 6735 5861 5075 3656 8453 7011 4768 2192 7373 4474 3195 2083 7461 6108 4396 2955
4 0 12256 12256 0 6297 7065 8249 10505 4109 5528 7570 10281 5108 7864 9190 10277 5780 7882 8839 11049
5  6297 6735 6735 6297 0 927 2336 4918 2437 1083 2680 4745 1922 2974 4127 4953 773 1708 3155 5462
6  7065 5861 5861 7065 927 0 1426 3991 3262 1851 1844 3871 2690 2138 3280 4106 1600 817 2242 4535
7  8249 5075 5075 8249 2336 1426 0 2735 4446 3035 1559 3231 3874 1830 2944 3637 3009 1098 834 3346
8  10505 3656 3656 10505 4918 3991 2735 0 6702 5291 3388 2155 6130 3173 2287 2580 5591 3287 1904 835
9  4109 8453 8453 4109 2437 3262 4446 6702 0 1725 3767 6478 1830 4061 5387 6474 1777 4079 5036 7246
10  5528 7011 7011 5528 1083 1851 3035 5291 1725 0 2356 5067 854 2650 3884 5012 1832 2668 3625 5835
11 7570 4768 4768 7570 2680 1844 1559 3388 3767 2356 0 2816 3183 294 1620 2748 3440 2611 1722 3932
12  10281 2192 2192 10281 4745 3871 3231 2155 6478 5067 2816 0 5699 2522 1243 439 5471 4264 2552 1826
13  5108 7373 7373 5108 1922 2690 3874 6130 1830 854 3183 5699 0 3471 4456 5631 2210 3507 4464 6674
14  7864 4474 4474 7864 2974 2138 1830 3173 4061 2650 294 2522 3471 0 1326 2454 3734 2896 1507 3717
15  9190 3195 3195 9190 4127 3280 2944 2287 5387 3884 1620 1243 4456 1326 0 1175 4880 4010 2331 2663
16 10277 2083 2083 10277 4953 4106 3637 2580 6474 5012 2748 439 5631 2454 1175 0 5706 4685 2973 2052
17  5780 7461 7461 5780 773 1600 3009 5591 1777 1832 3440 5471 2210 3734 4880 5706 0 2381 3828 6135
18  7882 6108 6108 7882 1708 817 1098 3287 4079 2668 2611 4264 3507 2896 4010 4685 2381 0 1712 3950
19  8839 4396 4396 8839 3155 2242 834 1904 5036 3625 1722 2552 4464 1507 2331 2973 3828 1712 0 2515
20 11049 2955 2955 11049 5462 4535 3346 835 7246 5835 3932 1826 6674 3717 2663 2052 6135 3950 2515 0;

end;
